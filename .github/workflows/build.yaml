name: Build NextJS image

on:
  workflow_call:
    inputs:
      docker_image_name:
        required: false
        type: string
        default: ${{ vars.DOCKER_IMAGE_REPO }}
      docker_build_cache_image_name:
        required: false
        type: string
        default: ${{ vars.DOCKER_IMAGE_BUILD_REPO }}
      docker_registry:
        required: false
        type: string
        default: ${{ vars.DOCKER_REGISTRY }}
      image_tag:
        required: false
        type: string
      sentry_org:
        required: false
        default: ${{ vars.SENTRY_ORG }}
        type: string
      sentry_url:
        required: false
        default: ${{ vars.SENTRY_URL }}
        type: string
      sentry_project:
        required: false
        default: ${{ vars.SENTRY_PROJECT }}
        type: string
    secrets:
      NPM_TOKEN:
        required: true
      SENTRY_AUTH_TOKEN:
        required: false
    outputs:
      image_id:
        description: "SHA digest for the built image"
        value: "${{ jobs.build.outputs.image_id }}"
      image_registry:
        description: "Docker registry where image was pushed"
        value: "${{ inputs.docker_registry }}"
      image:
        description: "Full image path (including registry)"
        value: "${{ jobs.build.outputs.image }}"
      image_tag:
        description: "Tag for the pushed image"
        value: "${{ jobs.build.outputs.image_tag }}"
      build_id:
        description: "Unique ID for the fresh build"
        value: "${{ jobs.build.outputs.build_id }}"

env:
  IMAGE_NAME: ${{ inputs.docker_image_name }}
  IMAGE_FULL_PATH: ${{ inputs.docker_registry }}/${{ inputs.docker_image_name }}
  # VAULT_KEY: ${{ vars.VAULT_ENV }}/data/github-actions/project/${{ inputs.docker_image_name }}
  GIT_REPO_URL: ${{ github.server_url }}/${{ github.repository }}
  BUILD_ID: # set through a step
  BUILD_TIMESTAMP: # set through a step
  # These come from environment/secrets
  DOCKER_USERNAME:
  DOCKER_PASSWORD:

jobs:
  build:
    name: Build
    runs-on: self-hosted
    container:
      image: ghcr.io/actions/actions-runner:latest

    concurrency:
      group: ${{ inputs.docker_registry }}/${{ inputs.docker_image_name }}

    outputs:
      image_id: ${{ steps.build_push.outputs.imageid }}
      image: ${{ inputs.docker_registry }}/${{ inputs.docker_image_name }}
      image_tag: ${{ steps.build_meta.outputs.git_image_tag }}
      build_id: ${{ steps.build_meta.outputs.build_id }}

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Check for deployment branch
        if: startsWith(github.ref, 'refs/heads/deployment/')
        run: |
          echo "deployment_type=$(echo ${{ github.ref }} | cut -d / -f 4)" >> $GITHUB_OUTPUT
        id: deployment

      - name: Determine build env variables
        run: |
          echo "build_id=$(date +%Y%m%d)_$(echo $GITHUB_SHA | cut -c -8)_${GITHUB_RUN_NUMBER}" >> $GITHUB_OUTPUT
          echo "git_image_tag=git-$(echo ${{ github.sha }} | cut -c -8)" >> $GITHUB_OUTPUT
        id: build_meta

      - name: Determine Docker tags and labels
        id: docker_meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ inputs.docker_registry }}/${{ inputs.docker_image_name }}
          tags: |
            type=raw,value=${{steps.build_meta.outputs.git_image_tag}}
            type=ref,event=pr
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value={{branch}}-latest,enable=${{steps.deployment.conclusion != 'skipped'}}

      - name: Log into Docker registry
        uses: docker/login-action@v3
        with:
          registry: ${{ inputs.docker_registry }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: remote
          driver-opts:
          endpoint: tcp://buildkitd:1234
          install: true
          cleanup: true

      - name: Check if an image for this git head already exists
        id: check_existing
        run: |
          if docker buildx imagetools inspect ${{ env.IMAGE_FULL_PATH }}:${{ steps.build_meta.outputs.git_image_tag }} ; then
            echo status=found >> $GITHUB_OUTPUT ;
          else
            echo status=not_found >> $GITHUB_OUTPUT ;
          fi

      - name: Update existing image tags
        if: steps.check_existing.outputs.status == 'found'
        run: |
          TAGS=$(echo "${{ steps.docker_meta.outputs.tags }}" | grep latest)
          for tag in $TAGS ; do
            docker buildx imagetools create -t $tag ${{ env.IMAGE_FULL_PATH }}:${{ steps.build_meta.outputs.git_image_tag }} ;
          done

      - name: Build bundle
        uses: docker/build-push-action@v5
        id: build_push
        if: steps.check_existing.outputs.status != 'found'
        with:
          context: .
          push: true
          build-args: |
            SENTRY_ORG=${{ inputs.sentry_org }}
            SENTRY_URL=${{ inputs.sentry_url }}
            SENTRY_PROJECT=${{ inputs.sentry_project }}
            BUILD_ID=${{ steps.build_meta.outputs.build_id }}
            GIT_REPO=${{ github.repository }}
            GIT_REV=${{ github.sha }}
            GIT_REPO_URL=${{ env.GIT_REPO_URL }}
            NPM_REGISTRY_SERVER=${{ vars.NPM_REGISTRY_SERVER }}
          secrets: |
            SENTRY_AUTH_TOKEN=${{ secrets.SENTRY_AUTH_TOKEN }}
            NPM_TOKEN=${{ secrets.NPM_TOKEN }}
          labels: |
            ${{ steps.docker_meta.outputs.labels }}
            org.opencontainers.image.version=${{ steps.build_meta.outputs.build_id }}
          tags: |
            ${{ steps.docker_meta.outputs.tags }}
          cache-from: type=registry,ref=${{ inputs.docker_registry }}/${{ inputs.docker_build_cache_image_name }}:cache
          cache-to: type=registry,ref=${{ inputs.docker_registry }}/${{ inputs.docker_build_cache_image_name }}:cache,mode=max,image-manifest=true
        env:
          BUILDX_GIT_LABELS: full
